const threeSumClosest = require('../src/threeSumClosest.js')

describe('threeSumClosest', () => {
	const testCases = [
		{ nums: [-1, 2, 1, -4], target: 1, expected: 2 },
		{ nums: [0, 0, 0], target: 1, expected: 0 },
		{ nums: [0, 1, 2], target: 0, expected: 3 },
		{ 
			nums: [-827,39,955,593,507,452,148,761,155,-479,923,-353,901,-242,941,833,851,-839,-647,779,-961,-508,-306,91,-762,-807,569,383,-743,257,-866,907,418,268,-93,-530,215,-152,-118,222,604,-746,467,-521,-39,-553,-197,760,491,-380,-185,-814,680,-768,-417,-383,848,634,488,228,-338,-5,508,811,204,-456,682,503,-735,772,-122,43,-867,667,-235,-491,-292,278,502,95,-2,878,203,29,-970,-906,-277,-954,373,-161,272,-458,-607,-190,-295,575,-23,922,-339,86,469,190,885,440,882,-83,758,-978,925,-621,-98,-672,-952,-639,-129,-344,-622,-841,-395,-117,-573,866,18,-367,-69,-359,815,101,5,956,59,-100,-513,-836,642,-547,133,501,194,-676,-581,-482,156,-461,166,-770,349,-664,551,781,764,-160,-203,497,-864,-677,556,-833,-124,-896,550,-257,-703,-139,356,767,94,612,-28,368,168,-75,471,245,142,-330,477,-454,-365,227,583,787,-963,-974,213,55,-131,-515,-777,-613,754,252,-237,589,-213,-993,-905,-214,26,-887,-821,-17,-374,-3,-22,674,-714,875,730,250,456,-562,-196,838,-806,-761,909,-194,71,-26,765,727,458,515,-684,946,798,598,-966,-514,707,-422,-697,688,-908,-501,-804,-885,236,-860,341,254,474,-891,-378,-244,-143,582,-497,36,323,249,797,957,-705,237,-54,303,-373,-862,-630,138,740,967,823,343,826,940,63,-941,462,-816,-605,-838,-281,-585,-832,-992,633,-159,924,-976,-637,-576,-355,931,-413,-813,-520,198,917,829,-850,-913,-522,-265,-169,759,-21,202,226,-219,-915,-794,595,415,-318,-443,-55,-166,419,889,154,935,662,485,920,-218,793,355,-929,126,444,-985,893,293,-690,19,975,770,-793,67,-49,524,-436,879,487,-332,-452,-708,41,564,-962,806,177,-620,-297,-228,812,410,-366,83,211,7,-568,-424,574,165,903,161,-689,34,-499,2,117,-612,543,913,-717,-542,463,728,-749,-254,455,239,807,300,-7,-71,763,-883,-351,382,915,-973,790,978,-177,992,800,-853,-145],
			target: -8120,
			expected: -2970,
		},
		{
			nums: [704,-923,961,506,201,-809,409,358,752,432,629,-869,-381,-678,182,431,762,828,-224,131,-735,-892,-635,-969,799,11,-971,-797,-254,345,399,831,187,-146,326,213,-40,57,867,513,-554,-951,115,68,-888,203,-109,-641,-984,-314,-991,-674,641,-886,858,165,859,-802,-885,-500,712,476,-516,-186,231,502,934,-999,557,700,284,-580,-427,320,-740,965,428,240,775,617,925,-975,-536,119,317,-403,58,566,416,264,377,954,-907,219,151,603,706,350,-542,-891,-444,-859,553,833,268,-945,18,-43,801,579,-64,-538,572,105,180,637,740,866,-12,-646,677,539,511,-102,608,-84,670,979,683,-286,982,609,-849,-240,396,720,-382,-271,87,294,-929,395,725,766,488,-434,-792,590,222,-835,-192,-691,133,249,-151,255,810,308,-388,-583,234,-130,791,-986,-582,-168,-587,-652,750,271,807,649,142,622,-505,369,443,551,588,-447,-492,-285,-796,44,-401,-920,138,172,945,-841,996,-392,953,198,-703,218,-209,623,174,-912,977,-175,-66,481,757,-689,3,35,-354,-660,492,454,-166,144,-322,923,199,319,140,-324,-451,298,-276,967,8,-750,-48,179,690,14,-620,462,-409,-653,-53,550,680,-917,465,-980,-539,-173,-30,490,-389,-632,159,-277,455,-820,489,-19,259,-514,435,-278,-197,17,276,-205,938,-806,-65,-585,795,-900,-846,221,417,-742,-472,-563,658,-41,-237,638,-361,545,-930,-312,-264,365,-974,-748,803,600,581,-864,-762,-301,327,-485,-363,450,-317,63,531,875,-546,-180,325,-791,760,-230,883,370,-884,-31,632,-941,-614,-898,842,587,-172,-610,621,972,-245,-719,-593,51,59,-115,536,410,774,-843,53,963,-327,-133,-654,-357,903,-565,49,-436,-85,-74,-560,306,406,789,605,-183,-249,-235,42,155,80,682,340,855,653,-138,738,612,297,804,61,-70,121,830,947,149,-343,-687,591,-793,-771,-714,697,-337,715,-815,-673,256,123,415,-143,905,-978,598,-368,102,-788,522,478,-142,-716,-621,895,456,-870,67,957,-73,-836,-414,794,530,-639,457,-766,166,-607,315,34,279,-352,-50,-325,-174,-631,868,-837,655,673,-880,917,-540,223,671,316,-894,664,817,787,642,300,-47,-162,716,69,-120,507,684,-656,408,-273,-221,-541,77,-425,116,-555,376,780,-114,499,143,517,614,-496,301,430,434,863,-63,896,4,-263,-746,122,-823,-780,460,420,733,-2,-502,765,175,971,932,-307,758,190,-958,920,548,-838,773,-711,-931,-959,942,-928,-914,-910,-448,-20,764,533,-490,-375,926,411,-598],
			target: -8951,
			expected: -2976,
		},
		{
			nums: [4,0,5,-5,3,3,0,-4,-5],
			target: -2,
			expected: -2,
		}
	]

	testCases.forEach(({ nums, target, expected }) => {
		test(`returns ${expected} for nums ${nums} and target ${target}`, () => {
			const result = threeSumClosest(nums, target)
			expect(result).toBe(expected)
		})
	})
})